// Copyright (c) 2020 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// .---. .----.----.----.----.----.----..----.----.----.----.----.----.
// |1 2| |....|1 f1|2 f2|3 f3|4 f4|5 f5||6 f6|7 f7|8 f8|9 f9|0f10|dl  |
// |0 ^| |\t  |q  Q|w  W|e  E|r  R|t  T||y  Y|u  U|i  I|o  O|p  P|bs  |
// :---: |----|----|----|----|----|----||----|----|----|----|----|----|
// |***| |****|!   |@   |#   |$   |%f11||^f12|& uu|*  u|_ dd|= in|\  ||
// |mod| |ctl |a  A|s  S|d  D|f  F|g  G||h  H|j  J|k  K|l  L|;  :|'  "|
// :---: |----|----|----|----|----|----||----|----|----|----|----|----|
// |...| |****|`   |~   |(   |[   |{ lk||} ho|]  l|)  d|-  r|+ en|....|
// |imm| |shl |z  Z|x  X|c  C|v  V|b  B||n  N|m  M|,  <|.  >|/  ?|\n  |
// '---' '----'----'----|----|----|----||----|----|----|----'----'----'
// layers:              |****|****|....||....|****|****|
//   one                |alt |one |es  ||\s  |sup |two | <--- thumb
// + two                '----'----'----''----'----'----'
// = tri  ^------------------ left ---^  ^--- right -----------------^
// = .--.--.--.---.--. .--.--.--.--.--.  .---.---.
//   |b1|b2|b3|clr|bt| |l-|l+|vx|v-|v+|  |prt|usb|
//   |z |x |c | v |b | |q |w |e |r |t |  | y | u |
//   '--'--'--'---'--' '--'--'--'--'--'  '---'---'

/ {
  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      bindings = <
&kp TAB      &kp Q        &kp W        &kp E        &kp R        &kp T
&kp Y        &kp U        &kp I        &kp O        &kp P        &kp BSPC
&kp LCTRL    &kp A        &kp S        &kp D        &kp F        &kp G
&kp H        &kp J        &kp K        &kp L        &kp SEMI     &kp SQT
&kp LSHFT    &kp Z        &kp X        &kp C        &kp V        &kp B
&kp N        &kp M        &kp COMMA    &kp DOT      &kp FSLH     &kp RET
&kp LALT     &mo 1        &kp ESC      &kp SPACE    &kp LGUI     &mo 2
      >;
    };
    one_layer {
      bindings = <
&trans       &kp N1       &kp N2       &kp N3       &kp N4       &kp N5
&kp N6       &kp N7       &kp N8       &kp N9       &kp N0       &kp DEL
&trans       &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT
&kp CARET    &kp AMPS     &kp STAR     &kp UNDER    &kp EQUAL    &kp BSLH
&trans       &kp GRAVE    &kp TILDE    &kp LPAR     &kp LBKT     &kp LBRC
&kp RBRC     &kp RBKT     &kp RPAR     &kp MINUS    &kp PLUS     &trans
&trans       &trans       &trans       &trans       &trans       &trans
      >;
    };
    two_layer {
      bindings = <
&trans       &kp F1       &kp F2       &kp F3       &kp F4       &kp F5
&kp F6       &kp F7       &kp F8       &kp F9       &kp F10      &kp DEL
&trans       &none        &none        &none        &none        &kp F11
&kp F12      &kp PG_UP    &kp UP       &kp PG_DN    &kp INS      &kp PIPE
&trans       &none        &none        &none        &none        &kp K_LOCK
&kp HOME     &kp LEFT     &kp DOWN     &kp RIGHT    &kp END      &trans
&trans       &trans       &trans       &trans       &trans       &trans
      >;
    };
    tri_layer {
      bindings = <
&trans       &kp C_BRI_DN &kp C_BRI_UP &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP
&kp PSCRN    &out OUT_USB &trans       &trans       &trans       &trans
&trans       &trans       &trans       &trans       &trans       &trans
&trans       &trans       &trans       &trans       &trans       &trans
&trans       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR   &out OUT_BLE
&trans       &trans       &trans       &trans       &trans       &trans
&trans       &trans       &trans       &trans       &trans       &trans
      >;
    };
  };
};
